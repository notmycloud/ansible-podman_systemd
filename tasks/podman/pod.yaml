---
- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Construct Podman service options"
  ansible.builtin.set_fact:
    podman_service:
      config: 
        Unit:
          Description: "Podman {{ pod }}-pod.service"
          Documentation: 
            - man:podman-pod-run(1)
            - "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/assembly_porting-containers-to-systemd-using-podman_building-running-and-managing-containers"
          Wants: 
            - network.target
          After: 
            - network-online.target
          # TODO: Test for volume paths
          # AssertPathExists:
        Service:
          Environment:
            - 'PODMAN_SYSTEMD_UNIT=%n'
          ExecStartPre: 
            - '-/bin/rm -f %t/%n.pod-id'
            - '-/bin/rm -f %t/%n.pid'
            # - "-/usr/bin/podman pod rm -f {{ pod }}"
            - >-
              /usr/bin/podman pod create
              --name {{ pod }}
              --net slirp4netns:allow_host_loopback=true,enable_ipv6=true
              --infra-conmon-pidfile %t/%n.pid
              --infra-name={{ pod }}-infra
              --pod-id-file %t/%n.pod-id
              --replace
              {% if pm_pod.value.infra.podman_options.ports is defined %}
              {% for port in pm_pod.value.infra.podman_options.ports %}
              -p {{ port }}
              {% endfor %}
              {% endif %}
              {{ pm_pod.value.infra.podman_options.other_options | default(none) }}
          ExecStart: 
            - "/usr/bin/podman pod start --pod-id-file %t/%n.pod-id"
          ExecStop: 
            - "/usr/bin/podman pod stop --ignore --pod-id-file %t/%n.pod-id -t 10"
          ExecStopPost: 
            - "/usr/bin/podman pod rm -f --ignore --pod-id-file %t/%n.pod-id"
          Type: forking
          PIDFile: '%t/%n.pid'
          Restart: 'on-failure'
        Install:
          WantedBy: 
            - multi-user.target
            - default.target

- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Merge systemd config"
  ansible.builtin.set_fact: 
    pod_service: "{% if pm_pod.value.infra.service_options is defined %}{{ podman_service | combine(pm_pod.value.infra.service_options, recursive=True) }}{% else %}{{ podman_service }}{% endif %}"

- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Create service config"
  ansible.builtin.set_fact:
    container_dict: "{{ mydict | default({}) | combine({item[0]: item[1]}) }}"
  loop: "{{ (keys | zip(values)) | list }}"
  vars:
    keys:
      - "{{ pod }}-pod"
    values:
      - "{{ pod_service }}"

- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Create systemd config"
  ansible.builtin.set_fact:
    systemd_units: "{{ mydict | default({}) | combine({item[0]: item[1]}) }}"
  loop: "{{ (keys | zip(values)) | list }}"
  vars:
    keys:
      - "{{ pm_user }}"
    values:
      - enable_linger: "{% if pm_user == 'root' %}no{% else %}{{ pm_systemd.enable_linger | default('true')}}{% endif %}"
        service: "{{ container_dict }}"

- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Create systemd service"
  ansible.builtin.include_role:
    name: notmycloud.systemd_unit

- name: "Podman | {{ pm_user }} | Systemd | Pod | {{ pod }} | Create pod container services"
  ansible.builtin.include_tasks: 
    file: "container.yaml"
    apply:
      become_user: "{{ pm_user }}"
      become: yes
  vars:
    container_name: "{{ pod }}-{{ pod_container.key }}"
    container: "{{ pod_container.value }}"
  when: pod_container.key != 'infra'
  loop: "{{ pm_pod.value | dict2items }}"
  loop_control:
    loop_var: pod_container